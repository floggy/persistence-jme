Configuration

 If you haven't download the latest <<Floggy>> release, you can find it {{{http://sourceforge.net/project/showfiles.php?group_id=139426} <<here>>}}.

 
 Before starting the development you must configure the <<Floggy>> in your environment. Use one of this guides: 
 
 *{{{./configuration/eclipse.html} <<Eclipse>>}}.
 
 *{{{./configuration/netbeans.html} <<Netbeans>>}}.
 
 *{{{./configuration/ant.html} <<Ant>>}}.
 
 *{{{./configuration/commandline.html} <<Command line>>}}.
 
 *{{{./configuration/maven.html} <<Maven>>}}.

Using the framework
 
 First, you need to implement the interface <<net.sourceforge.floggy.persistence.Persistable>> into all classes that will be persisted.
 Every class that implements <<net.sourceforge.floggy.persistence.Persistable>> will be processed by the weaver to became a persistable entity.
 NOTE IMPORTANT: All classes who implements this interface must have a empty constructor. The trasients and static attributes 
 aren't persistable. 
 empty  
 
+------------------------------+
public class Person implements net.sourceforge.floggy.persistence.Persistable {
 
 	private String name;
 	private Date birthday;
 	private char gender;
 	private int age; // do not save this field
 	
	public Person(){
		// Empty constructor 
	}
 	...
 	
}
+-----------------------------+

 The next step is obtain a instance of <<net.sourceforge.floggy.persistence.PersistableManager>>. This can be done using the static method <<getInstance()>> of class <<net.sourceforge.floggy.persistence.PersistableManager>>

+------------------------------+

    PersistableManager pm = PersistableManager.getInstance();
    
+-----------------------------+

 Now you can save, load, delete and find objects using the instance of <<net.sourceforge.floggy.persistence.PersistableManager>>.
 
* Saving a object.
 
+------------------------------+
    
    Person person= new Person();
    
    person.setName(...);
    person.setBirthday(...);
    person.setGender(...);

    int idPerson = pm.save(person); 

+-----------------------------+
 
* Loading, editing or deleting a object, previous saved.
	
+------------------------------+

    Person person = new Person();

    // loading object
    pm.load(person, idPerson);

    // editing object
    person.setName(...);
    pm.save(person);

    // deleting object
    pm.delete(person);

+-----------------------------+

* Finding simple list of objects
	
+------------------------------+

    ObjectSet persons = pm.find(Person.class, null, null);

    Person p;
    for (int i = 0; i < persons.size(); i++) {
	 p = (Person) persons.get(i);
	 System.out.println(p.getName());
       ...	
    }

+-----------------------------+

* Filtering a list of objects 
	
+------------------------------+

// Filter just the persons whose gender is male

ObjectSet persons = pm.find(Person.class, new FilterMalePerson(), null);

... 

public class FilterMalePerson implements net.sourceforge.floggy.persistence.Filter {

	public boolean matches(Persistable persistable) {

		Person p = (Person) persistable;
		return p.getGender() == 'M';
	}

} 

+-----------------------------+

* Sorting a list of objects 
	
+------------------------------+

// Sorting persons by birthday day

ObjectSet persons = pm.find(Person.class, null, new OrderAgePerson());

... 

public class OrderAgePerson implements net.sourceforge.floggy.persistence.Comparator {

	public int compare(Persistable persistable1, Persistable persistable2) {
		Person p1 = (Person) persistable1;
		Person p2 = (Person) persistable2;
		
		if (p1.getBirthday().getTime() > p2.getBirthday().getTime()) {
			return FOLLOWS;
		} if (p1.getBirthday().getTime() < p2.getBirthday().getTime()) {
			return PRECEDES; 
		} else {
			return EQUIVALENT;
		}
	}

}
+-----------------------------+
