
Using the framework

 The first step you need to take is add the interface <<net.sourceforge.floggy.persistence.Persistable>> to the list of interfaces implemented by the classes that will be persisted.
 Every class that implements <<net.sourceforge.floggy.persistence.Persistable>> will be processed by the weaver to became a persistable entity.

 
+------------------------------+
public class Person implements net.sourceforge.floggy.persistence.Persistable {
 
 	private int age;
 	private String name;
 	
 	...
 	
}
+-----------------------------+

 The next step is obtain a instance of <<net.sourceforge.floggy.persistence.PersistableManager>>. This can be done using the static method <<getInstance()>> of class <<net.sourceforge.floggy.persistence.PersistableManager>>

+------------------------------+
public class HelloFloggyWorldMidlet extends Midlet {

    protected PersistableManager pm;
 
    protected void startApp() throws MIDletStateChangeException {
        pm= PersistableManager.getInstance();
        ...
    }
    
}
+-----------------------------+

 Now you can save, load, delete and find objects using the instance of <<net.sourceforge.floggy.persistence.PersistableManager>>.
 
* Saving a object.
 
+------------------------------+
public class HelloFloggyWorldMidlet extends Midlet {

    ...
    
    public void savePerson() {
    	Person person= new Person();
    	person.setAge(...);
    	person.setName(...);
    	int id= pm.save(person);
    	...
    }
}
+-----------------------------+
 
* Loading a object, previous saved.
	
+------------------------------+
public class HelloFloggyWorldMidlet extends Midlet {

    ...
    
    public Person loadPerson(int id) {
    	Person person= new Person();
    	pm.load(person, id);
    	return person;
    }
}
+-----------------------------+

* Finding objects
	
+------------------------------+
public class HelloFloggyWorldMidlet extends Midlet {

	...
	 
    public void listPersons() {
    	ObjectSet persons= pm.find(Person.class, null, null);
        while (persons.hasNext()) {
            Person person= (Person) persons.next();
            ...
        }
    }
}
+-----------------------------+
