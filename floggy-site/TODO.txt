- usar o replace de arquivos para editar corretamente a versão nos links no arquivo site.xml
- melhorar a perfomance do metodo find no PMImpl passando a RE para o construtor ObjectSetImpl instead of int[] ids
- move the package impl to a new project like floggy-persistence-framework-impl
- criar uma FAQ sobre o TCC e botar um link para ele
- melhorar as exceptions! adicionar um Exception field à Floggy|WeaverException e setar a nested Exception
- adicionar a o plugin PMD aos projetos.
- adicionar a o plugin FINDBUGS aos projetos.
- adicionar o checkstyle before compile, adicionar ao eclipse
- adicionar o plugin tasks (TODOs)
- adicionar o repositótio do Floggy ao central do Maven
- events? (beforeSave, afterSave, beforeLoad, afterLoad)
- adicionar o javadoc ao eclipse plugin

- The Floggy 7 classes (5 interfaces, 1 class and 1 exception) and 1111 tests to coverage all possible context into Floggy can be developed. Doing this we try to  a free bug software.
 Also we have the cobertua tool that help us to know how much of our code is being tested. We are trying to find a free Hudson server service to host the project and guarantee its continuos integration. Someone knows something?

Floggy
  - documentação do plugin
  - o que é mais caro criar um DataInputStream ou executar um metodo synchronized
  
- diagramas da arquitetura
- diagrama de classes e de sequência
- criar uma aplicação de exemplo
- documentar em código também
- deixar mais claro para os usuários que o Floggy não usa reflection at runtime!
- colocar as limitações do projeto (busca indexada, 
- verificar antes da adição dos métodos e campos se eles já não existem e dai gerar uma exception
- formatar o código
- medir a performance
- Dar um jeito de identificar mudanças nas classes e só enxertar as que contêm modificações
- criar a aplicação de exemplo e deixa-la pronta para ser usado pelos usuários ChurrasCalculator|Hospital-ME(liberada numa url, utilizar o tinyurl.com)
- translate this document
- adicionar link para doações
- possibilitar abrir rMS de outros midlets suites
- responder a pergunta e criar uma FAQ por versão??: http://www.javalobby.org/forums/thread.jspa?threadID=100688
- fazer testcase para variáveis final
- criar um arquivo de configuração floggy.xml
- criar uma exception mais especializada para identificar campos que nao possam salvar e mostrar no plugin do eclipse
- criar uma seção no site para chamar contribuições da comunidade. (how to help)
- criar um arquivo do tipo sitemap.xml
- Another question, suppose we have DomesticCat extends Cat, is it possible in Floggy a query like pm.find(Cat.class) returns instances not only Cat, but also subclasses like DomesticCat?
- add a UpdateManager to helps the developers to update his application, the PM.getInstance() will check if all RMS and persistable classes has the same structure if not it will throw a exception??
- postar notícias:
	- FEITO www.javafree.org
	- FEITO www.portaljava.com.br
	- FEITO www.guj.com.br
	- FEITO http://forum.java.sun.com/forum.jspa?forumID=76
	- FEITO www.dfjug.com.br
	- FEITO http://www.codeguru.com/forum/showthread.php?t=432574
	- FEITO http://www.j2meforums.com/forum/index.php?topic=16740.0
	- FEITO http://www.javalobby.org/forums/forum.jspa?forumID=17
	- FEITO http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=41&t=004658
	- FEITO http://forums.java.net/jive/thread.jspa?threadID=30247&tstart=0

- publicar artigo:
	- java magazine
	- web mobile

- articles
	- http://www.devmedia.com.br/articles/viewcomp.asp?comp=5961
			



MODULO DE PERSISTÊNCIA
- arquitetura do sistema
- exclusão em cascata (paleativo - chamar um método antes de deletar o Persistable, tipo: beforeDelete() throws Exception)
- fazer busca indexada (consultar netomarin@gmail.com)
- transação
- criar uma maneira de migrar de versões dos RMSs, talvez criar uma aplicação para isso. Ou colocar no primeiro registro o layout dos dados armazenados no RMS
- deixar ou não os RMS abertos??? ter um método para fechar os RMS destroyApp(boolean)
- pode-se solicitar ao PersistenceManager para que trabalhe com os RMS abertos ou fechados. (setWorkWithOpenRecordsStores(boolean)
- gerar uma classe que será responsável por saber os metadados da aplicação (criar um RMS com a descrição das classes)
- deve funcionar sem o modulo de sincronização
- attributes embebbeds (EJB 3.0)
- adicionar teste unitários aos projetos framework e weaver
- na task ant setar o commons-logging para uma instancia do logger ant
- transformar em opcional o atributo output da task ant
- mudar FloggyException para estender RecordStoreException?????? acho que não adianta de nada, pensar melhor
- melhorar o sistema de exceptions
- adicionar métodos para retornar a quantidade de itens salvos por entidade
- adicionar ao site informações sobre possiveís problemas com obfuscação (por causa que os persistables num vector são salvos com o nome da classe)
- adicionar ao site instruções de como contribuir com o projeto (criar um patch do trunk e enviar para os desenvolvedores).
- refatorar a class AbstractClass para se utilizada por todas os testes que requerem um PersistableManager


MODULO DE SINCRONIZAÇÃO
- usar a interface net.sourceforge.floggy.Synchronyzable para marcar as clases que devem ser sincronizadas
- todas as entidades deverão ter um id vindo do servidor??????? (para efeitos de delete, edit,...)
- usar a interface net.sourceforge.floggy.Serializable para serializar as classes em array de bytes??????
- enviar as entidades como arrays de bytes ou como estruturas CSV ou como documentos XML.
- usar o Java 5.0 com annotations e tirar-las na hora de fazer a modificação do código
- flag indicativa de não sincronização com o servidor (N-new, M-modified, E-excluded), primeiro byte a ser salvo
- se houver sincronização TEM que utilizar o modulo de persistência também.
- zipar os dados?!?!?! (medir performance)
- criptografar os dados!?!?! (medir performance)
- usar anotações para setar criptografia, compactação...
- verificar a possibilidade de transformar bytecode 5.0 para 1.3 via Javassist


MODULO DE REFLEXÃO
- se temos acesso a todas as estruturas das classes porque não criar métodos que retornem estas estruturas???
- getMethods(), getFields(), getSuperClass()
